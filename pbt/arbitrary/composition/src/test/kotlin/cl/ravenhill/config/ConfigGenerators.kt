package cl.ravenhill.config

import io.kotest.core.spec.style.FreeSpec
import io.kotest.matchers.collections.shouldHaveAtLeastSize
import io.kotest.matchers.collections.shouldHaveAtMostSize
import io.kotest.matchers.or
import io.kotest.matchers.should
import io.kotest.matchers.string.shouldHaveMinLength
import io.kotest.matchers.types.beInstanceOf
import io.kotest.property.Arb
import io.kotest.property.arbitrary.*
import io.kotest.property.checkAll

class ConfigGeneratorsTest : FreeSpec({

    "Given a configuration option generator" - {
        "when generating a configuration option" - {
            "then the key should be a non-empty string with at least 5 characters" {
                checkAll(arbConfigOption()) { (key, _) ->
                    key shouldHaveMinLength 5
                }
            }

            "then the value should be a String, Int, or Boolean" {
                checkAll(arbConfigOption()) { (_, value) ->
                    value should (beInstanceOf<String>()
                            or beInstanceOf<Int>()
                            or beInstanceOf<Boolean>())
                }
            }
        }
    }

    "Given a configuration list generator" - {
        "when generating a list of configuration options" - {
            "then the list should contain between 3 and 10 elements" {
                checkAll(arbConfigList()) { configList ->
                    configList
                        .shouldHaveAtLeastSize(3)
                        .shouldHaveAtMostSize(10)
                }
            }

            "then each configuration option should have a valid key-value pair" {
                checkAll(arbConfigList()) { configList ->
                    configList.forEach { (key, value) ->
                        key.shouldHaveMinLength(5)
                        value should (beInstanceOf<String>()
                                or beInstanceOf<Int>()
                                or beInstanceOf<Boolean>())
                    }
                }
            }
        }
    }
})

/**
 * Generates an arbitrary configuration option as a key-value pair.
 *
 * The key is a randomly generated string between 5 and 15 characters long, and the value is randomly chosen between:
 * - A string (1 to 20 characters)
 * - An integer (1 to 100)
 * - A boolean (true or false)
 *
 * ## Usage:
 * This function is useful for property-based testing of configuration systems that handle dynamic key-value pairs.
 *
 * @return An [Arb] generator that produces random configuration options as pairs of a string key and a value.
 */
private fun arbConfigOption(): Arb<Pair<String, Any>> = Arb.pair(
    Arb.string(5..15),
    Arb.choice(Arb.string(1..20), Arb.int(1..100), Arb.boolean())
)

/**
 * Generates an arbitrary list of configuration options.
 *
 * This function produces a list containing between 3 and 10 key-value pairs, where each pair is generated by
 * [arbConfigOption].
 *
 * ## Usage:
 * This generator is useful for testing scenarios involving dynamic configuration structures.
 *
 * @return An [Arb] generator that produces a list of random configuration key-value pairs.
 */
private fun arbConfigList(): Arb<List<Pair<String, Any>>> = Arb.list(arbConfigOption(), 3..10)
